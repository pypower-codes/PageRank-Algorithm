# -*- coding: utf-8 -*-
"""PageRank

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TG_aIvfPCiBYtpDylwKqi-eaP9ToRF0v
"""

"""
PyPower Projects 
PAGE RANK ALGORITHM

"""

import networkx as nx
import random
import matplotlib.pyplot as plt
import operator

#Generate the Graph
G=nx.gnp_random_graph(15,0.7,directed=True)

#Draw the Graph
nx.draw(G,with_labels=True,font_color="purple",font_size=30,node_color="yellow",node_size=3000,edge_color='blue')

#PLot the Graph
plt.show()

print(G.number_of_nodes()) #return the number of nodes

n = list(G.neighbors(2)) #Gives the list of the neighbour nodes of the given input node
print(n)

#Actual PageRank Implementation
x=random.choice([i for i in range(G.number_of_nodes())])
dict_counter={}

for i in range(G.number_of_nodes()):
    dict_counter[i]=0
dict_counter[x]=dict_counter[x]+1

for i in range(500000):
    list_n=list(G.neighbors(x)) #Get all the neighbours of randomly selected node
    if(len(list_n)==0):
        x=random.choice([i for i in range(G.number_of_nodes())])
        dict_counter[x]=dict_counter[x]+1
    else:
        x=random.choice(list_n)
        dict_counter[x]=dict_counter[x]+1

print("Random Walk Score Updated!")

#In Built Function for PageRank in Networkx library
p=nx.pagerank(G)
sorted_p=sorted(p.items(),key=operator.itemgetter(1))
sorted_rw=sorted(dict_counter.items(),key=operator.itemgetter(1))

#Compare the result of your calculation with the output of inbuilt function
print("Function Output")
print(sorted_p)
print("\n\n")
print("Our Calculation")
print(sorted_rw)